AC_INIT(src/main.c)

AC_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_INSTALL
AC_C_BIGENDIAN

if test $prefix = NONE
then
    myprefix=/usr/local
else
    myprefix=$prefix
fi

##############################################################
# configure arguments
##############################################################
DEBUGGING=0
LOGGING=0

AC_ARG_WITH(debug,              [  --with-debug              include debug info ], [ DEBUGGING=1; ], [])
AC_ARG_WITH(optimize,           [  --with-optimize           with optimize(-O in CFLAGS) ], [ ENABLE_OPTIMIZE=1 ], [ ENABLE_OPTIMIZE=0 ])

##############################################################
# check cpu type
##############################################################
AC_MSG_CHECKING(CPU type)

if test `uname -m` = x86_64
then
    echo x86_64

    AC_DEFINE(__64BIT_CPU__, 1)
elif test `uname -m` = i386 || test `uname -m` = i686
then
    echo x86_32

    AC_DEFINE(__32BIT_CPU__, 1)
elif test `uname -p` = sparc
then
    echo sparc

    AC_DEFINE(__32BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = sparc64
then
    echo sparc64

    AC_DEFINE(__64BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = ppc
then
    echo ppc

    AC_DEFINE(__32BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = ppc64
then
    echo ppc64

    AC_DEFINE(__64BIT_CPU__, 1)
    AC_DEFINE(__BIG_ENDIAN__, 1)
elif test `uname -m` = armv6l
then
    echo armv6l

    AC_DEFINE(__32BIT_CPU__, 1)
elif test `uname -m` = armv7l
then
    echo armv7l

    AC_DEFINE(__32BIT_CPU__, 1)
else
    echo other

    AC_DEFINE(__32BIT_CPU__, 1)
fi

##############################################################
# check operating systems
##############################################################
AC_MSG_CHECKING(Operating System)

CFLAGS='-DPREFIX="\"${DESTDIR}/\""'
CFLAGS="-fPIC -rdynamic $CFLAGS"

AR_LIB=

if test `uname -s` = "Darwin"; then
    echo "Darwin"

    OS=DARWIN

    AC_DEFINE(__DARWIN__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L/usr/local/opt/ncurses/lib -L/usr/local/opt/readline/lib -I/usr/local/opt/readline/include $CFLAGS"
    else 
        CFLAGS="-Isrc/ -I. -L . -L/usr/local/opt/ncurses/lib -L/usr/local/opt/readline/lib -I/usr/local/opt/readline/include -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi
elif test `uname -s` = "FreeBSD"; then
    echo "FreeBSD"

    OS=FREEBSD

    AC_DEFINE(__FREEBSD__, 1)

    CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
elif uname -s | grep -q CYGWIN_NT; then
    echo CYGWIN

    OS=CYGWIN

    AC_DEFINE(__CYGWIN__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L . $CFLAGS"
    else 
        CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi
else
    echo "Linux"

    OS=LINUX

    AC_DEFINE(__LINUX__, 1)

    if test $myprefix = /usr/local; then
        CFLAGS="-Isrc/ -I. -L . $CFLAGS"
    else
        CFLAGS="-Isrc/ -I. -L . -I$myprefix/include -L$myprefix/lib $CFLAGS"
    fi

    AC_HAVE_LIBRARY(util, [ LIBS="$LIBS -lutil" ], [])
fi

##############################################################
# CFLAGS settings
##############################################################
if test -d /usr/local/include
then
    CFLAGS="$CFLAGS -I/usr/local/include"
fi

if test -d /usr/local/lib
then
    CFLAGS="$CFLAGS -L /usr/local/lib"
fi

if test -d /opt/local/include
then
    CFLAGS="$CFLAGS -I/opt/local/include"
fi

if test -d /opt/local/lib
then
    CFLAGS="$CFLAGS -L /opt/local/lib"
fi

if test -d /usr/include/i386-linux-gnu/
then
    CFLAGS="$CFLAGS -I /usr/include/i386-linux-gnu//"
fi

if test -d /usr/lib/i386-linux-gnu/
then
    CFLAGS="$CFLAGS -L /usr/lib/i386-linux-gnu/"
fi

if test $ENABLE_OPTIMIZE = 1
then
    CFLAGS="$CFLAGS -O3"
fi

if test $DEBUGGING = 1
then
    CFLAGS="$CFLAGS -g -DMDEBUG"
    #CFLAGS="$CFLAGS -g -DMDEBUG -Werror"
fi

AC_SUBST(OS)

export CFLAGS

##########################################################
# Libs
##########################################################
CC=clang

INSTALL="$(which install) -c"

AC_CHECK_HEADER(readline/readline.h, [AC_DEFINE(HAVE_READLINE_H, 1)], [])
AC_HAVE_LIBRARY(readline, [ LIBS="$LIBS -lreadline"; ], [])

AC_CHECK_HEADER(bsd/stdlib.h, [AC_DEFINE(HAVE_BSD_H, 1)], [])
AC_HAVE_LIBRARY(bsd, [ LIBS="$LIBS -lbsd"; ], [])

if test "$OS" != FREEBSD
then
    AC_HAVE_LIBRARY(dl, [ LIBS="$LIBS -ldl"; ], [exit])
fi

AC_CHECK_HEADER(math.h, [AC_DEFINE(HAVE_MATH_H,1)], [])
AC_HAVE_LIBRARY(m, [ LIBS="$LIBS -lm"; ], [])
AC_CHECK_HEADER(iconv.h, [AC_DEFINE(HAVE_ICONV_H, 1)], [])

if test "$OS" = CYGWIN || test "$OS" = DARWIN || test "$OS" = FREEBSD
then
    LIBS="$LIBS -liconv"
fi

AC_CHECK_HEADER(pcre.h, [AC_DEFINE(HAVE_PCRE_H,1)], [])
AC_HAVE_LIBRARY(pcre, [ LIBS="$LIBS -lpcre"; ], [ eixt ])

AC_HAVE_LIBRARY(rt, [ LIBS="$LIBS -lrt"; ], [])

AC_SUBST(LIBS)

if which clang-7 > /dev/null
then
    CC=clang-7
elif which clang > /dev/null
then
    CC=clang
else
    CC=gcc
fi

AC_SUBST(CC)

DESTDIR=$myprefix

AC_SUBST(DESTDIR)

COMMON_OBJS="src/buffer.o src/debug.o src/xfunc.o src/klass.o src/constant.o src/code.o src/alignment.o src/utf.o"

OBJS="src/vm.o src/script.o src/object.o src/array.o src/string.o src/block.o src/regex.o src/integer.o src/byte.o src/short.o src/long.o src/float.o src/pointer.o src/char.o src/bool.o src/hash.o src/list.o src/tuple.o src/carray.o src/type.o src/stack.o src/heap.o src/exception.o src/native_method.o src/class_system.o src/class_clover.o src/class_clover_runtime.o src/clover_to_clang.o src/class_thread.o src/parser.o src/node_type.o src/node.o src/cast.o src/vtable.o src/script_ctime.o src/node_block.o src/node_block_type.o src/class_compiler.o src/klass_compile_time.o src/method_compiler.o src/module.o src/class_clover_compile_time.o"

AC_CHECK_FUNCS(lchmod)

AC_CHECK_FUNCS(execvpe)

AC_SUBST(OBJS)

AC_OUTPUT(Makefile)
